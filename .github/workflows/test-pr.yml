name: Run Tests on Pull Request

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    # SQLite doesn't require external services

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Debug environment variables
      run: |
        echo "FLASK_ENV: $FLASK_ENV"
        echo "FRONTEND_URL: $FRONTEND_URL" 
        echo "DATABASE_URL: $DATABASE_URL"
        echo "CONGRESS_API_KEY: $CONGRESS_API_KEY"
      env:
        FLASK_ENV: testing
        FRONTEND_URL: ${{ secrets.TEST_FRONTEND_URL }}
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        CONGRESS_API_KEY: ${{ secrets.CONGRESS_API_KEY }}

    - name: Create SQLite instance directory and test permissions
      run: |
        cd backend
        mkdir -p instance
        echo "=== Directory structure ==="
        pwd
        ls -la
        ls -la instance/ || echo "instance dir doesn't exist"
        echo "=== Current working directory permissions ==="
        ls -ld .
        echo "=== Testing SQLite file creation ==="
        touch instance/test.db
        ls -la instance/
        rm instance/test.db
        echo "=== Testing database URI resolution ==="
        python -c "
import os
print('DATABASE_URL env var:', os.getenv('DATABASE_URL', 'NOT SET'))
print('Default would be: sqlite:////app/instance/civiliscope.db')
print('Working directory:', os.getcwd())
print('Absolute path would be:', os.path.abspath('instance/civiliscope.db'))
"

    - name: Start Flask backend
      run: |
        cd backend
        python run.py &
        echo $! > flask.pid
        sleep 10
      env:
        FLASK_ENV: testing
        FRONTEND_URL: ${{ secrets.TEST_FRONTEND_URL }}
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        CONGRESS_API_KEY: ${{ secrets.CONGRESS_API_KEY }}

    - name: Run tests
      run: |
        cd backend
        python run_tests.py all
      env:
        FLASK_ENV: testing
        FRONTEND_URL: ${{ secrets.TEST_FRONTEND_URL }}
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        CONGRESS_API_KEY: ${{ secrets.CONGRESS_API_KEY }}

    - name: Stop Flask backend
      if: always()
      run: |
        cd backend
        if [ -f flask.pid ]; then
          kill $(cat flask.pid) || true
          rm flask.pid
        fi

    - name: Run linter
      run: |
        cd backend
        ruff check .

    - name: Check code formatting
      run: |
        cd backend
        ruff format --check .
